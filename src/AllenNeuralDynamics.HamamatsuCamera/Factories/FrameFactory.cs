using Bonsai.IO;

using HamamatsuCamera.API;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace HamamatsuCamera.Factories
{
    /// <summary>
    /// Asynchronously generates a sequence of <see cref="Frame"/> from the Hamamatsu C13440 camera.
    /// Initialized and observed by the <see cref="C13440"/> class.
    /// Communicates with the C13440 camera and reads in the image data from unmanaged memory.
    /// </summary>
    public class FrameFactory : IDisposable
    {
        // ---------------- Global Constants ----------------

        private const int MONO16_BPP = 2;   // Bytes per pixel of Mono16 images
        private int BUFFER_SIZE = 10;

        // ---------------- Global Variables ----------------

        private C13440 C13440;
        public int Left;                            // X-Offset of Camera Crop
        public int Top;                            // Y-Offset of Camera Crop

        // Communication with the Hamamatsu API to the camera
        private int m_indexCamera = 0;
        //private int BufferSize;

        // Flags that control the generation of camera frames
        private bool bGenerate = true;      // Controls the disposal of this class
        public bool Acquiring;

        // Observer of frames generated by this factory
        private object Observer;

        // Notifications for Calibration Editor
        public event EventHandler AcquisitionStarted;
        public event EventHandler BufferReleased;

        public Dictionary<int, int> LookupTable;

        //private bool IncludeTIFF;
        //private FileStream TiffStream;          // Stream for the .tif writer
        //private BinaryWriter TiffWriter;        // Binary writer for the .tif files
        //private int Index;          // Index used to specify if this instance is writing the even or odd .tif files
        //private string FolderName;  // Base name and relative path of the folder containing the .tif files
        //private string FolderAbsPath;
        //private string TiffFileName;    // Base Filename of the .tif files
        //private ushort FramesPerTiff;   // Number of frames to be written to each .tif file

        //private bool IncludeProcessing; 
        //private StreamWriter ProcessingWriter; // Writer for writing to .csv file
        //private byte DeinterleaveCount;     // Used in ImageProcessingView to deinterleave region activity into a user-specified number of signals
        //private string ProcessingFileName;            // File name of the .csv file being written to
        //private PathSuffix ProcessingSuffix;          // Suffix of the file name of the .csv file being written to
        //private bool Overwrite;             // Flag for whether to overwrite the .csv file if it exists
        //private Dictionary<int, int> LookupTable;
        //private bool firstFrame = true;

        //private const int MetaDataOffset = 9;           // Number of columns of MetaData in the output .csv file
        //private const string RegionLabel = "Region ";   // Base column header for region data, combined with region index

        private DCAM_MANAGER DCAM;
        private TiffWriter TiffWriter;
        private ImageProcessing ImageProcessing;

        // ---------------- Factory Construction && Public Methods ----------------

        /// <summary>
        /// Constructor that sets the observer, initializes the camera properties
        /// and regions with the values stored in the C13440 instance, 
        /// and opens the <see cref="FrameGenerator(object)"/>
        /// </summary>
        /// <param name="frameObserver">Observer created in the <see cref="C13440"/> class.</param>
        /// <param name="loadCameraProps">Stored camera properties from the <see cref="C13440"/> class.</param>
        /// <param name="regions">Stored user-defined regions from the <see cref="C13440"/> class.</param>
        internal FrameFactory(object frameObserver, C13440 c13440)
        {
            SetObserver(frameObserver);
            InitializeMembers(c13440);
            Open();
        }

        private void InitializeMembers(C13440 c13440)
        {
            C13440 = c13440;
            Acquiring = C13440.Acquiring;
            // Tiff Members
            if(C13440.TiffProperties.IncludeTIFF)
                TiffWriter = new TiffWriter(C13440.TiffProperties);
            if (C13440.ImageProcessingProperties.IncludeProcessing)
                ImageProcessing = new ImageProcessing(C13440.ImageProcessingProperties);
        }

        /// <summary>
        /// Sets the frame observer in this class and throws and exception if there is no observer
        /// </summary>
        /// <param name="observer">Observer created in the <see cref="C13440"/> class.</param>
        internal void SetObserver(object observer)
        {
            this.Observer = observer ?? throw new ArgumentNullException(nameof(observer));
        }

        /// <summary>
        /// Opens this <see cref="FrameFactory"/> class by starting a new task factory
        /// with the <see cref="FrameGenerator(object)"/> 
        /// </summary>
        public void Open()
        {
            Task.Factory.StartNew(new Action<object>(FrameGenerator), Observer);
        }

        /// <summary>
        /// Disposes this <see cref="FrameFactory"/> class by allowing the <see cref="FrameGenerator(object)"/>
        /// to gracefully complete.
        /// </summary>
        public void Dispose()
        {
            Acquiring = false;
            bGenerate = false;
        }

        // ----------------- Camera Connection and Acquisition ----------------



        // ----------------- Camera Properties ----------------



        // ----------------- Frame Generation ----------------

        

        /// <summary>
        /// Initializes communication with the C13440 camera,
        /// Starts data acquisition and generates <see cref="Frame"/>.
        /// Passes the generated camera frame as the OnNext element of the observer within the C13440 class.
        /// </summary>
        /// <param name="observer">The <see cref="Frame"/> observer created within the <see cref="C13440"/> class.</param>
        private void FrameGenerator(object observer)
        {
            try
            {
                // Locally set the observer
                IObserver<Frame> frameObserver = (IObserver<Frame>)observer;

                // Initialize the myImage to store the image coming from the camera
                Frame frame = new Frame();

                // Initialize Frame Generator
                InitializeFrameGenerator();

                // Output null frame when camera properties are read
                frameObserver.OnNext(frame);
                while (bGenerate)
                {
                    if (Acquiring)
                    {
                        // Find the desired buffer size
                        UpdateBufferSize();

                        // Allocate the buffer
                        if (!DCAM.buf_alloc(BUFFER_SIZE))
                        {
                            MessageBox.Show(Resources.MsgBox_Error_AllocateBuffer, "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            Dispose();
                            continue;
                        }

                        // Acquire Frames
                        AcquireFrames(ref frame, ref frameObserver);

                        // Try to Release Buffer
                        if (!DCAM.buf_release())
                        {
                            MessageBox.Show(Resources.MsgBox_Error_ReleaseBuffer, "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            Dispose();
                            continue;
                        }

                        // Notify Calibration Form, if it exists, that Buffer has been released
                        if (BufferReleased != null)
                            BufferReleased.Invoke(this, EventArgs.Empty);
                    }
                    else
                        Thread.Sleep(10);
                }

                // Close the DCAM Manager
                if (!DCAM.dev_close())
                    MessageBox.Show(Resources.MsgBox_Error_CloseDevice, "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);

                // Uninitialize the API
                if (!DCAM_API_MANAGER.uninit())
                    MessageBox.Show(Resources.MsgBox_Error_UnInitAPI, "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);

                // Write the end of directory bytes and close the writer
                if (TiffWriter != null)
                    TiffWriter.Close();
                if (ImageProcessing != null)
                    ImageProcessing.Close();
            }
            catch(Exception ex)
            {
                Console.WriteLine($"Error: FrameGenerator\nMessage: {ex.Message}");
            }
        }

        private void AcquireFrames(ref Frame frame, ref IObserver<Frame> frameObserver)
        {
            try
            {
                using (DCAM_WAIT_MANAGER dcamwait = new DCAM_WAIT_MANAGER(ref DCAM))
                {
                    // Specify that the camera is in sequence mode
                    DCAM.m_capmode = DCAMCAP_START.SEQUENCE;

                    // Try to start capture
                    if (!DCAM.cap_start())
                    {
                        MessageBox.Show(Resources.MsgBox_Error_StartCapture, "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        Dispose();
                        return;
                    }

                    // Notify Calibration Form, if it exists, that acquisition has restarted
                    if (AcquisitionStarted != null)
                        AcquisitionStarted.Invoke(this, EventArgs.Empty);

                    // Initialize previous frame count and events variables
                    DCAMWAIT eventmask = DCAMWAIT.CAPEVENT.FRAMEREADY | DCAMWAIT.CAPEVENT.STOPPED;
                    DCAMWAIT eventhappened = DCAMWAIT.NONE;

                    // Loop until factory is disposed or acquisition is stopped
                    while (Acquiring)
                    {
                        // Reset the eventhappened variable
                        eventhappened = DCAMWAIT.NONE;

                        // Start waiting for the next event from the camera
                        // TODO: Could get stuck here when hardware triggering!
                        if (!dcamwait.start(eventmask, ref eventhappened)) continue;

                        // If a FRAMEREADY event occurred, process it. 
                        if (eventhappened & DCAMWAIT.CAPEVENT.FRAMEREADY)
                        {
                            AcquireFrame(ref frame);
                            frameObserver.OnNext(frame);
                        }
                    }

                    if (!DCAM.cap_stop())
                        MessageBox.Show(Resources.MsgBox_Error_StopCapture, "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            catch(Exception ex)
            {
                Console.WriteLine($"Error: AcquireFrames\nMessage: {ex.Message}");
            }
        }

        Stopwatch sw = new Stopwatch();
        private void AcquireFrame(ref Frame frame)
        {
            try
            {
                sw.Restart();
                int bufferIndex = 0;   // Index of frame in buffer
                int frameCount = 0;    // Frame count of most recent frame

                // Get the capture transfer information and continue if no error has occurred
                if (!DCAM.cap_transferinfo(ref bufferIndex, ref frameCount))
                    throw new IOException(string.Format(Resources.MsgBox_Error_CapTransferInfo));

                // Set where in the buffer we are looking
                frame.UpdateFrameInfo(bufferIndex, Left, Top);
                // Lock the image in unmanaged memory
                DCAM.buf_lockframe(ref frame.bufframe);

                // Write to tiff if applicable
                if (TiffWriter != null)
                    TiffWriter.WriteFrame(ref frame);
                if (ImageProcessing != null)
                    ImageProcessing.Process(ref frame);
            }
            catch (Exception ex)
            {
                Dispose();
                Console.WriteLine($"Error: AcquireFrame\nMessage: {ex.Message}");
            }
        }

        private void InitializeFrameGenerator()
        {
            try
            {
                // Initialize DCAM_API_MANAGER
                if (!DCAM_API_MANAGER.init())
                {
                    MessageBox.Show(Resources.MsgBox_Error_InitAPI, "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    Dispose();
                    return;
                }

                // Initialize DCAM_MANAGER
                DCAM = new DCAM_MANAGER();
                if (!DCAM.dev_open(m_indexCamera))
                {
                    MessageBox.Show(Resources.MsgBox_Error_OpenDevice, "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    if (!DCAM_API_MANAGER.uninit())
                        MessageBox.Show(Resources.MsgBox_Error_UnInitAPI, "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    Dispose();
                    return;
                }

                // Read Camera Properties
                ReadProps();

                // TODO: Update variables in tiff properties

               
            }
            catch(Exception ex)
            {
                Console.WriteLine($"Error: InitializeFrameGenerator\nMessage: {ex.Message}");
            }
        }

        private void UpdateBufferSize()
        {
            try
            {
                double fps = 0.0;
                C13440.CameraProps.Where(prop => prop.getname() == "INTERNAL FRAME RATE").First().getvalue(ref fps);
                BUFFER_SIZE = Math.Max(1, (int)(fps / 10));
            }
            catch(Exception ex)
            {
                Console.WriteLine($"Error: UpdateBufferSize()\nMessage: {ex.Message}");
            }
        }

        private void ReadProps()
        {
            // Read all stored settings on camera
            List<DCAM_PROP_MANAGER> propManagers = new List<DCAM_PROP_MANAGER>();
            DCAM_PROP_MANAGER propManager = new DCAM_PROP_MANAGER(DCAM, DCAMIDPROP.ZERO);
            while (propManager.nextid())
            {
                propManager.update_attr();

                if(!propManager.is_attr_readonly() && C13440.StoredSettings != null)
                    if (C13440.StoredSettings.TryGetValue(propManager.m_idProp.getidprop(), out double storedValue))
                        propManager.setvalue(storedValue);

                propManagers.Add(propManager.Clone());
            }

            // Store the settings ordered by group
            C13440.CameraProps = propManagers.OrderBy(prop => prop.m_attr.iGroup);

            // If Subarray is On, read the Left and Top values
            double mode = 0.0;
            C13440.CameraProps.Where(prop => prop.getname().Equals(StaticData.Strings.SUBARR_MODE)).First().getvalue(ref mode);
            if (mode == StaticData.SubArr_ON)
            {
                double left = 0.0;
                double top = 0.0;
                C13440.CameraProps.Where(prop => prop.getname().Equals(StaticData.Strings.SUBARR_HPOS)).First().getvalue(ref left);
                C13440.CameraProps.Where(prop => prop.getname().Equals(StaticData.Strings.SUBARR_VPOS)).First().getvalue(ref top);
                Left = (int)left;
                Top = (int)top;
            }

            // If applicable, inform the TiffWriter of relevent camera props
            if(TiffWriter != null)
            {
                double width = 0.0;
                double height = 0.0;
                double bytesPerImage = 0.0;
                C13440.CameraProps.Where(prop => prop.getname().Equals(StaticData.Strings.IMG_WIDTH)).First().getvalue(ref width);
                C13440.CameraProps.Where(prop => prop.getname().Equals(StaticData.Strings.IMG_HEIGHT)).First().getvalue(ref height);
                C13440.CameraProps.Where(prop => prop.getname().Equals(StaticData.Strings.IMG_FRAMEBYTES)).First().getvalue(ref bytesPerImage);

                TiffWriter.Initialize(width, height, bytesPerImage);
            }

        }

    }
}
